name: 'Deploy Service ECS'
description: 'Queima Labs DevOps Stack - Deploy Microservice - services no ECS da AWS'
inputs:
  stage:
    description: Stage where will be deployed
    required: true
  new_relic_license: 
    description: New Relic License Key
    required: true
  access_token: 
    description: Personal Access Token scope read:pkg
    required: true
  environment_acronym: 
    description: Environment acronym to configure environment variables
    required: true
  config:
    description: String JSON to be map
    required: true
    default: "{\"NODE_ENV\":\"local\"}"
  enable_task_definition:
    description: Enable returning task definition
    required: true
    default: 'true'
  service_name: 
    description: Service name
    required: true
  ecr:
    description: ECR Repository
    required: true
outputs:
  image:
    description: "Image name complete"
    value: ${{ steps.build-image.outputs.image }}
runs:
  using: "composite"
  steps:
    - name: Setup Buildctl
      shell: bash
      run: |
        wget -q https://github.com/moby/buildkit/releases/download/v0.9.0/buildkit-v0.9.0.linux-amd64.tar.gz -O /tmp/buildkit.tar.gz
        sudo tar vxfz /tmp/buildkit.tar.gz -C /usr/local/

    - name: Get Environment names
      shell: bash
      env:
        ENVIRONMENT: ${{ inputs.environment_acronym }}
        CONFIG: ${{ inputs.config }}
      run: |
        cat>configs<<EOF
        $(echo $CONFIG | jq -r "to_entries|map(\"\(.key)=\(.value|tostring)\")|.[]")
        EOF
        source configs
        bash config/environment.config.sh
        cat .env
    
    - name: Configure NPM
      shell: bash
      env:
        NODE_AUTH_TOKEN: ${{ inputs.access_token  }}
      run: |
        cat <<EOF > .npmrc
        @queimadiaria:registry=https://npm.pkg.github.com/
        //npm.pkg.github.com/:_authToken=$NODE_AUTH_TOKEN
        EOF


    - name: Build, tag, and push image to Amazon ECR
      shell: bash
      id: build-image
      env:
        ECR_REGISTRY: ${{ inputs.ecr }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        sleep 3
        [ "${{inputs.stage}}" = "dev" ] && export NODE_ENV=development || export NODE_ENV=production 
        [ "${{inputs.stage}}" = "hml" ] && export NODE_ENV=hml 
        
        echo ""
        echo "building without cache"
        echo ""
        cd ${{ github.workspace }}
        echo "${PWD}"
        ls -l 
        docker build \
          --build-arg NODE_ENV=${NODE_ENV} \
          --build-arg NEW_RELIC_LICENSE_KEY=${{ inputs.new_relic_license }} \
          --build-arg NEW_RELIC_APP_NAME=${{ inputs.service_name }}-${{ inputs.stage }} \
          -t $ECR_REGISTRY/$ECR_REPO_NAME:$IMAGE_TAG .
        
        echo ""
        echo "Builded"
        echo ""
        
        docker push $ECR_REGISTRY/$ECR_REPO_NAME:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPO_NAME:$IMAGE_TAG"

    - name: Get Task Definition
      shell: bash
      env:
        ENABLE_TASK: ${{ inputs.enable_task_definition }}
      run: |
        [ "$ENABLE_TASK" = true ] || exit 0
        echo "Describing task-${SERVICE_NAME}"
        aws ecs describe-task-definition \
            --task-definition "task-${SERVICE_NAME}" \
            --region "us-east-1" \
            --query taskDefinition | \
          jq --arg img "${SERVICE_NAME}" \
            '.containerDefinitions[0].name = $img' > taskDefinition.json
          
        cat taskDefinition.json

    # Usar o valor da variÃ¡vel CLUSTER diretamente do workflow
    echo "CLUSTER=${{ env.CLUSTER }}" >> $GITHUB_ENV
    echo "Cluster definido como: ${{ env.CLUSTER }}"

